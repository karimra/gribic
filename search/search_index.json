{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to gRIBIc # gRIBIc is a gRIBI CLI client that implements the Openconfig gRIBI RPCs. It is intended to be used for educational and testing purposes. Features # Full Support for Get And Flush RPCs Modify RPC is supported with IPv4, IPv6, Next Hop Group and Next Hop AFTs Template based modify RPC operations configuration Concurrent multi target RPC execution Quick start guide # Installation # bash -c \"$(curl -sL https://get-gribic.kmrd.dev)\" Get Request # Query all AFTs in all network instances gribic -a router1 -u admin -p admin --skip-verify get Query all AFTs in network instance default gribic -a router1 -u admin -p admin --skip-verify get --ns default Query AFT type ipv4 in network instance default gribic -a router1 -u admin -p admin --skip-verify get --ns default --aft ipv4 Query AFT type nhg (next hop group) in all network instances gribic -a router1 -u admin -p admin --skip-verify get --aft nhg Flush Request # Flush all AFTs in network instance default gribic -a router1 -u admin -p admin --skip-verify flush --ns default Flush all AFTs in all network instances gribic -a router1 -u admin -p admin --skip-verify flush --ns-all Modify Request # Run all operations defined in the input-file in single-primary redundancy mode, with persistence preserve and ack mode RIB_FIB gribic -a router1 -u admin -p admin --skip-verify modify \\ --single-primary \\ --preserve \\ --fib \\ --election-id 1 :2 \\ --input-file <path/to/modify/operations>","title":"Home"},{"location":"#welcome-to-gribic","text":"gRIBIc is a gRIBI CLI client that implements the Openconfig gRIBI RPCs. It is intended to be used for educational and testing purposes.","title":"Welcome to gRIBIc"},{"location":"#features","text":"Full Support for Get And Flush RPCs Modify RPC is supported with IPv4, IPv6, Next Hop Group and Next Hop AFTs Template based modify RPC operations configuration Concurrent multi target RPC execution","title":"Features"},{"location":"#quick-start-guide","text":"","title":"Quick start guide"},{"location":"#installation","text":"bash -c \"$(curl -sL https://get-gribic.kmrd.dev)\"","title":"Installation"},{"location":"#get-request","text":"Query all AFTs in all network instances gribic -a router1 -u admin -p admin --skip-verify get Query all AFTs in network instance default gribic -a router1 -u admin -p admin --skip-verify get --ns default Query AFT type ipv4 in network instance default gribic -a router1 -u admin -p admin --skip-verify get --ns default --aft ipv4 Query AFT type nhg (next hop group) in all network instances gribic -a router1 -u admin -p admin --skip-verify get --aft nhg","title":"Get Request"},{"location":"#flush-request","text":"Flush all AFTs in network instance default gribic -a router1 -u admin -p admin --skip-verify flush --ns default Flush all AFTs in all network instances gribic -a router1 -u admin -p admin --skip-verify flush --ns-all","title":"Flush Request"},{"location":"#modify-request","text":"Run all operations defined in the input-file in single-primary redundancy mode, with persistence preserve and ack mode RIB_FIB gribic -a router1 -u admin -p admin --skip-verify modify \\ --single-primary \\ --preserve \\ --fib \\ --election-id 1 :2 \\ --input-file <path/to/modify/operations>","title":"Modify Request"},{"location":"install/","text":"Installation # gribic is a single binary built for the Linux, Mac OS and Windows platforms distributed via Github releases . Linux/Mac OS # To download & install the latest release the following automated installation script can be used: bash -c \" $( curl -sL https://get-gribic.kmrd.dev ) \" As a result, the latest gribic version will be installed in the /usr/local/bin directory and the version information will be printed out. Downloading https://github.com/karimra/gribic/releases/download/v0.0.1/gribic_0.0.1_linux_x86_64.tar.gz Preparing to install gribic 0.0.1 into /usr/local/bin gribic installed into /usr/local/bin/gribic version : 0.0.1 commit : 90c5d07 date : 2022-03-13T19:05:43Z gitURL : https://github.com/karimra/gribic docs : https://gribic.kmrd.dev Packages # Linux users running distributions with support for deb / rpm packages can install gribic using pre-built packages: bash -c \" $( curl -sL https://get-gribic.kmrd.dev ) \" -- --use-pkg Docker # The gribic container image can be pulled from GitHub container registries. The tag of the image corresponds to the release version and latest tag points to the latest available release: # pull latest release from github registry docker pull ghcr.io/karimra/gribic:latest # pull a specific release from github registry docker pull ghcr.io/karimra/gribic:0.0.1 docker run \\ --network host \\ --rm ghcr.io/karimra/gribic --help","title":"Installation"},{"location":"install/#installation","text":"gribic is a single binary built for the Linux, Mac OS and Windows platforms distributed via Github releases .","title":"Installation"},{"location":"install/#linuxmac-os","text":"To download & install the latest release the following automated installation script can be used: bash -c \" $( curl -sL https://get-gribic.kmrd.dev ) \" As a result, the latest gribic version will be installed in the /usr/local/bin directory and the version information will be printed out. Downloading https://github.com/karimra/gribic/releases/download/v0.0.1/gribic_0.0.1_linux_x86_64.tar.gz Preparing to install gribic 0.0.1 into /usr/local/bin gribic installed into /usr/local/bin/gribic version : 0.0.1 commit : 90c5d07 date : 2022-03-13T19:05:43Z gitURL : https://github.com/karimra/gribic docs : https://gribic.kmrd.dev","title":"Linux/Mac OS"},{"location":"install/#packages","text":"Linux users running distributions with support for deb / rpm packages can install gribic using pre-built packages: bash -c \" $( curl -sL https://get-gribic.kmrd.dev ) \" -- --use-pkg","title":"Packages"},{"location":"install/#docker","text":"The gribic container image can be pulled from GitHub container registries. The tag of the image corresponds to the release version and latest tag points to the latest available release: # pull latest release from github registry docker pull ghcr.io/karimra/gribic:latest # pull a specific release from github registry docker pull ghcr.io/karimra/gribic:0.0.1 docker run \\ --network host \\ --rm ghcr.io/karimra/gribic --help","title":"Docker"},{"location":"user_guide/","text":"Flags # Global Flags # config # The --config flag specifies the location of a configuration file that gribic will read. If not specified, gribic searches for a file named .gribic with extensions yaml, yml, toml or json in the following locations: $PWD $HOME $XDG_CONFIG_HOME $XDG_CONFIG_HOME/gribic address # The address flag [-a | --address] is used to specify the gRIBI server address in address:port format, for e.g: 192.168.113.11:57400 Multiple target addresses can be specified, either as comma separated values: gribic --address 192 .168.113.11:57400,192.168.113.12:57400 or by using the --address flag multiple times: gribic -a 192 .168.113.11:57400 --address 192 .168.113.12:57400 The port number can be omitted, in which case the value fro m the flag --port will be appended to the address username # The username flag [-u | --username] is used to specify the target username as part of the user credentials password # The password flag [-p | --password] is used to specify the target password as part of the user credentials. port # insecure # The insecure flag [--insecure] is used to indicate that the client wishes to establish an non-TLS enabled gRPC connection. To disable certificate validation in a TLS-enabled connection use skip-verify flag. skip-verify # The skip verify flag [--skip-verify] indicates that the target should skip the signature verification steps, in case a secure connection is used. tls-ca # The TLS CA flag [--tls-ca] specifies the root certificates for verifying server certificates encoded in PEM format. tls-cert # The tls cert flag [--tls-cert] specifies the public key for the client encoded in PEM format. tls-key # The tls key flag [--tls-key] specifies the private key for the client encoded in PEM format. timeout # The timeout flag [--timeout] specifies the gRPC timeout after which the connection attempt fails. Valid formats: 10s, 1m30s, 1h. Defaults to 10s debug # The debug flag [-d | --debug] enables the printing of extra information when sending/receiving an RPC proxy-from-env # The proxy-from-env flag [--proxy-from-env] indicates that the gribic should use the HTTP/HTTPS proxy addresses defined in the environment variables http_proxy and https_proxy to reach the targets specified using the --address flag. election-id # The Election ID flag --election-id is used to specify the election ID used with the Flush and Modify RPCs It takes a string in the format high:low where both high and low are uint64 forming a uint128 election ID value. : , 1: and :1 are valid values. max-rcv-msg-size # The --max-rcv-msg-size set the maximum message size the client can receive from the server. defaults to 4MB Targets # TODO","title":"User guide"},{"location":"user_guide/#flags","text":"","title":"Flags"},{"location":"user_guide/#global-flags","text":"","title":"Global Flags"},{"location":"user_guide/#config","text":"The --config flag specifies the location of a configuration file that gribic will read. If not specified, gribic searches for a file named .gribic with extensions yaml, yml, toml or json in the following locations: $PWD $HOME $XDG_CONFIG_HOME $XDG_CONFIG_HOME/gribic","title":"config"},{"location":"user_guide/#address","text":"The address flag [-a | --address] is used to specify the gRIBI server address in address:port format, for e.g: 192.168.113.11:57400 Multiple target addresses can be specified, either as comma separated values: gribic --address 192 .168.113.11:57400,192.168.113.12:57400 or by using the --address flag multiple times: gribic -a 192 .168.113.11:57400 --address 192 .168.113.12:57400 The port number can be omitted, in which case the value fro m the flag --port will be appended to the address","title":"address"},{"location":"user_guide/#username","text":"The username flag [-u | --username] is used to specify the target username as part of the user credentials","title":"username"},{"location":"user_guide/#password","text":"The password flag [-p | --password] is used to specify the target password as part of the user credentials.","title":"password"},{"location":"user_guide/#port","text":"","title":"port"},{"location":"user_guide/#insecure","text":"The insecure flag [--insecure] is used to indicate that the client wishes to establish an non-TLS enabled gRPC connection. To disable certificate validation in a TLS-enabled connection use skip-verify flag.","title":"insecure"},{"location":"user_guide/#skip-verify","text":"The skip verify flag [--skip-verify] indicates that the target should skip the signature verification steps, in case a secure connection is used.","title":"skip-verify"},{"location":"user_guide/#tls-ca","text":"The TLS CA flag [--tls-ca] specifies the root certificates for verifying server certificates encoded in PEM format.","title":"tls-ca"},{"location":"user_guide/#tls-cert","text":"The tls cert flag [--tls-cert] specifies the public key for the client encoded in PEM format.","title":"tls-cert"},{"location":"user_guide/#tls-key","text":"The tls key flag [--tls-key] specifies the private key for the client encoded in PEM format.","title":"tls-key"},{"location":"user_guide/#timeout","text":"The timeout flag [--timeout] specifies the gRPC timeout after which the connection attempt fails. Valid formats: 10s, 1m30s, 1h. Defaults to 10s","title":"timeout"},{"location":"user_guide/#debug","text":"The debug flag [-d | --debug] enables the printing of extra information when sending/receiving an RPC","title":"debug"},{"location":"user_guide/#proxy-from-env","text":"The proxy-from-env flag [--proxy-from-env] indicates that the gribic should use the HTTP/HTTPS proxy addresses defined in the environment variables http_proxy and https_proxy to reach the targets specified using the --address flag.","title":"proxy-from-env"},{"location":"user_guide/#election-id","text":"The Election ID flag --election-id is used to specify the election ID used with the Flush and Modify RPCs It takes a string in the format high:low where both high and low are uint64 forming a uint128 election ID value. : , 1: and :1 are valid values.","title":"election-id"},{"location":"user_guide/#max-rcv-msg-size","text":"The --max-rcv-msg-size set the maximum message size the client can receive from the server. defaults to 4MB","title":"max-rcv-msg-size"},{"location":"user_guide/#targets","text":"TODO","title":"Targets"},{"location":"cmd/flush/","text":"Description # The Flush Command runs a gRIBI Flush RPC as a client, sending a FlushRequest to a gRIBI server. The Server returns a single FlushResponse . Usage # gribic [global-flags] flush [local-flags] Alias: f Flags # ns # The --ns flag sets the network instance name the client wants to flush. ns-all # The --ns-all flag indicates to the server that the client wants to flush all instances. override # The --override flag indicates to the server that the client wants the server to not compare the election ID with already known single-primary clients. Examples # Flush all AFTs in network instance default gribic -a router1 -u admin -p admin --skip-verify flush --ns default Flush all AFTs in all network instances gribic -a router1 -u admin -p admin --skip-verify flush --ns-all","title":"Flush"},{"location":"cmd/flush/#description","text":"The Flush Command runs a gRIBI Flush RPC as a client, sending a FlushRequest to a gRIBI server. The Server returns a single FlushResponse .","title":"Description"},{"location":"cmd/flush/#usage","text":"gribic [global-flags] flush [local-flags] Alias: f","title":"Usage"},{"location":"cmd/flush/#flags","text":"","title":"Flags"},{"location":"cmd/flush/#ns","text":"The --ns flag sets the network instance name the client wants to flush.","title":"ns"},{"location":"cmd/flush/#ns-all","text":"The --ns-all flag indicates to the server that the client wants to flush all instances.","title":"ns-all"},{"location":"cmd/flush/#override","text":"The --override flag indicates to the server that the client wants the server to not compare the election ID with already known single-primary clients.","title":"override"},{"location":"cmd/flush/#examples","text":"Flush all AFTs in network instance default gribic -a router1 -u admin -p admin --skip-verify flush --ns default Flush all AFTs in all network instances gribic -a router1 -u admin -p admin --skip-verify flush --ns-all","title":"Examples"},{"location":"cmd/get/","text":"Description # The Get Command runs a gRIBI Get RPC as a client, sending a GetRequest to a gRIBI server. The Server returns a stream of GetResponse(s) with the installed AFTs . The client can specify the type of AFTs as well as the network instance it is interested on. Or simply request ALL AFT types from ALL network instances. Usage # gribic [global-flags] get [local-flags] Alias: g Flags # ns # The --ns flag sets the network instance name the client is interested on. aft # The --aft flag sets the AFT type the client is interested on. It defaults to ALL which means all AFT types. Accepted values: all nexthop (or nh ) nexthop-group (or nhg ) ipv4 ipv6 mac mpls policy-forwarding (or pf ) Examples # Query all AFTs in network instance default gribic -a router1 -u admin -p admin --skip-verify get --ns default Query all AFTs in all network instances gribic -a router1 -u admin -p admin --skip-verify get --ns-all Query AFT type ipv4 in network instance default gribic -a router1 -u admin -p admin --skip-verify get --ns default --aft ipv4 Query AFT type nhg (next hop group) in all network instances gribic -a router1 -u admin -p admin --skip-verify get --ns-all --aft nhg","title":"Get"},{"location":"cmd/get/#description","text":"The Get Command runs a gRIBI Get RPC as a client, sending a GetRequest to a gRIBI server. The Server returns a stream of GetResponse(s) with the installed AFTs . The client can specify the type of AFTs as well as the network instance it is interested on. Or simply request ALL AFT types from ALL network instances.","title":"Description"},{"location":"cmd/get/#usage","text":"gribic [global-flags] get [local-flags] Alias: g","title":"Usage"},{"location":"cmd/get/#flags","text":"","title":"Flags"},{"location":"cmd/get/#ns","text":"The --ns flag sets the network instance name the client is interested on.","title":"ns"},{"location":"cmd/get/#aft","text":"The --aft flag sets the AFT type the client is interested on. It defaults to ALL which means all AFT types. Accepted values: all nexthop (or nh ) nexthop-group (or nhg ) ipv4 ipv6 mac mpls policy-forwarding (or pf )","title":"aft"},{"location":"cmd/get/#examples","text":"Query all AFTs in network instance default gribic -a router1 -u admin -p admin --skip-verify get --ns default Query all AFTs in all network instances gribic -a router1 -u admin -p admin --skip-verify get --ns-all Query AFT type ipv4 in network instance default gribic -a router1 -u admin -p admin --skip-verify get --ns default --aft ipv4 Query AFT type nhg (next hop group) in all network instances gribic -a router1 -u admin -p admin --skip-verify get --ns-all --aft nhg","title":"Examples"},{"location":"cmd/modify/","text":"Description # The Modify Command runs a gRIBI Modify RPC as a client, sending a stream of ModifyRequest(s) to a gRIBI server. The Server returns a stream of ModifyResponse(s) . The ModifyRequest is used to set the current session parameters (redundancy, persistence, and ack mode) as well as issuing AFT operation to the server. The AFT operation can be an ADD, REPLACE or DELETE and references a single AFT entry of type IPV4, IPv6, Next Hop, Next Hop Group, MPLS, MAC or Policy Forwarding. A single modifyRequest can carry multiple AFT operations. A Modify RPC start with the client sending a ModifyRequest indicating the session parameters it wants to apply to the current session, the parameters are: Redundancy: specifies the client redundancy mode, either ALL_PRIMARY or SINGLE_PRIMARY ALL_PRIMARY : is the default and indicates that the server should accept AFT operations from all clients. When it comes to ADD operations, the server should add an entry when it first receives it from any client. While it should wait for the last delete to remove it from its RIB. In other words, the server should keep track of the number of clients it received a specific entry from. SINGLE_PRIMARY : implies that the clients went through an election process and a single one came out as primary, it has the highest election ID which it sends to the server in the initial ModifyRequest as well as with each AFT Operation. The server accepts AFT Operations only from the client with the highest election ID. Persistence: Specifies desired server behavior when the client disconnects. DELETE : is the default, it means that all AFTs received from the client shall be deleted when it disconnects. PRESERVE : the server should keep the RIB and FIB entries set by the client when it disconnects. Ack Mode: Specifies the Ack type expected by the client RIB_ACK : the server must respond with RIB_PROGRAMMED RIB_AND_FIB_ACK : the server must respond with RIB_PROGRAMMED , if the AFT entry is also programmed in the NE FIB, the server must response with FIB_PROGRAMMED instead. Usage # gribic [global-flags] modify [local-flags] Alias: mod , m Flags # single-primary # The --single-primary flag set the session parameters redundancy to SINGLE_PRIMARY preserve # The --preserve flag set the session parameters persistence to PRESERVE fib # The --fib flag set the session parameters Ack mode to RIB_AND_FIB_ACK input-file # The --input-file flag points to a modify input file See here for some input file examples Examples # Run all operations defined in the input-file in single-primary redundancy mode, with persistence preserve and ack mode RIB_FIB gribic -a router1 -u admin -p admin --skip-verify modify \\ --single-primary \\ --preserve \\ --fib \\ --election-id 1 :2 \\ --input-file <path/to/modify/operations>","title":"Modify"},{"location":"cmd/modify/#description","text":"The Modify Command runs a gRIBI Modify RPC as a client, sending a stream of ModifyRequest(s) to a gRIBI server. The Server returns a stream of ModifyResponse(s) . The ModifyRequest is used to set the current session parameters (redundancy, persistence, and ack mode) as well as issuing AFT operation to the server. The AFT operation can be an ADD, REPLACE or DELETE and references a single AFT entry of type IPV4, IPv6, Next Hop, Next Hop Group, MPLS, MAC or Policy Forwarding. A single modifyRequest can carry multiple AFT operations. A Modify RPC start with the client sending a ModifyRequest indicating the session parameters it wants to apply to the current session, the parameters are: Redundancy: specifies the client redundancy mode, either ALL_PRIMARY or SINGLE_PRIMARY ALL_PRIMARY : is the default and indicates that the server should accept AFT operations from all clients. When it comes to ADD operations, the server should add an entry when it first receives it from any client. While it should wait for the last delete to remove it from its RIB. In other words, the server should keep track of the number of clients it received a specific entry from. SINGLE_PRIMARY : implies that the clients went through an election process and a single one came out as primary, it has the highest election ID which it sends to the server in the initial ModifyRequest as well as with each AFT Operation. The server accepts AFT Operations only from the client with the highest election ID. Persistence: Specifies desired server behavior when the client disconnects. DELETE : is the default, it means that all AFTs received from the client shall be deleted when it disconnects. PRESERVE : the server should keep the RIB and FIB entries set by the client when it disconnects. Ack Mode: Specifies the Ack type expected by the client RIB_ACK : the server must respond with RIB_PROGRAMMED RIB_AND_FIB_ACK : the server must respond with RIB_PROGRAMMED , if the AFT entry is also programmed in the NE FIB, the server must response with FIB_PROGRAMMED instead.","title":"Description"},{"location":"cmd/modify/#usage","text":"gribic [global-flags] modify [local-flags] Alias: mod , m","title":"Usage"},{"location":"cmd/modify/#flags","text":"","title":"Flags"},{"location":"cmd/modify/#single-primary","text":"The --single-primary flag set the session parameters redundancy to SINGLE_PRIMARY","title":"single-primary"},{"location":"cmd/modify/#preserve","text":"The --preserve flag set the session parameters persistence to PRESERVE","title":"preserve"},{"location":"cmd/modify/#fib","text":"The --fib flag set the session parameters Ack mode to RIB_AND_FIB_ACK","title":"fib"},{"location":"cmd/modify/#input-file","text":"The --input-file flag points to a modify input file See here for some input file examples","title":"input-file"},{"location":"cmd/modify/#examples","text":"Run all operations defined in the input-file in single-primary redundancy mode, with persistence preserve and ack mode RIB_FIB gribic -a router1 -u admin -p admin --skip-verify modify \\ --single-primary \\ --preserve \\ --fib \\ --election-id 1 :2 \\ --input-file <path/to/modify/operations>","title":"Examples"}]}